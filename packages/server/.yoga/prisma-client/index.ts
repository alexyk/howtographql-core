// Code generated by Prisma (prisma@1.32.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  tutorial: (where?: TutorialWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userTutorial: (where?: UserTutorialWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  tutorial: (where: TutorialWhereUniqueInput) => TutorialNullablePromise;
  tutorials: (args?: {
    where?: TutorialWhereInput;
    orderBy?: TutorialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tutorial>;
  tutorialsConnection: (args?: {
    where?: TutorialWhereInput;
    orderBy?: TutorialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TutorialConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userTutorial: (
    where: UserTutorialWhereUniqueInput
  ) => UserTutorialNullablePromise;
  userTutorials: (args?: {
    where?: UserTutorialWhereInput;
    orderBy?: UserTutorialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserTutorial>;
  userTutorialsConnection: (args?: {
    where?: UserTutorialWhereInput;
    orderBy?: UserTutorialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserTutorialConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createTutorial: (data: TutorialCreateInput) => TutorialPromise;
  updateTutorial: (args: {
    data: TutorialUpdateInput;
    where: TutorialWhereUniqueInput;
  }) => TutorialPromise;
  updateManyTutorials: (args: {
    data: TutorialUpdateManyMutationInput;
    where?: TutorialWhereInput;
  }) => BatchPayloadPromise;
  upsertTutorial: (args: {
    where: TutorialWhereUniqueInput;
    create: TutorialCreateInput;
    update: TutorialUpdateInput;
  }) => TutorialPromise;
  deleteTutorial: (where: TutorialWhereUniqueInput) => TutorialPromise;
  deleteManyTutorials: (where?: TutorialWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserTutorial: (data: UserTutorialCreateInput) => UserTutorialPromise;
  updateUserTutorial: (args: {
    data: UserTutorialUpdateInput;
    where: UserTutorialWhereUniqueInput;
  }) => UserTutorialPromise;
  updateManyUserTutorials: (args: {
    data: UserTutorialUpdateManyMutationInput;
    where?: UserTutorialWhereInput;
  }) => BatchPayloadPromise;
  upsertUserTutorial: (args: {
    where: UserTutorialWhereUniqueInput;
    create: UserTutorialCreateInput;
    update: UserTutorialUpdateInput;
  }) => UserTutorialPromise;
  deleteUserTutorial: (
    where: UserTutorialWhereUniqueInput
  ) => UserTutorialPromise;
  deleteManyUserTutorials: (
    where?: UserTutorialWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  tutorial: (
    where?: TutorialSubscriptionWhereInput
  ) => TutorialSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userTutorial: (
    where?: UserTutorialSubscriptionWhereInput
  ) => UserTutorialSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserTutorialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "upvoted_ASC"
  | "upvoted_DESC"
  | "saved_ASC"
  | "saved_DESC"
  | "currentChapter_ASC"
  | "currentChapter_DESC";

export type TutorialOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "gatsbyID_ASC"
  | "gatsbyID_DESC"
  | "numberofChapters_ASC"
  | "numberofChapters_DESC"
  | "numberofStudents_ASC"
  | "numberofStudents_DESC"
  | "upvotes_ASC"
  | "upvotes_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "githubHandle_ASC"
  | "githubHandle_DESC"
  | "githubUserId_ASC"
  | "githubUserId_DESC"
  | "avatarUrl_ASC"
  | "avatarUrl_DESC"
  | "bio_ASC"
  | "bio_DESC"
  | "contributor_ASC"
  | "contributor_DESC"
  | "expertise_ASC"
  | "expertise_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type TutorialWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  gatsbyID?: Maybe<String>;
}>;

export interface UserTutorialWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  tutorial?: Maybe<TutorialWhereInput>;
  upvoted?: Maybe<Boolean>;
  upvoted_not?: Maybe<Boolean>;
  saved?: Maybe<Boolean>;
  saved_not?: Maybe<Boolean>;
  currentChapter?: Maybe<Int>;
  currentChapter_not?: Maybe<Int>;
  currentChapter_in?: Maybe<Int[] | Int>;
  currentChapter_not_in?: Maybe<Int[] | Int>;
  currentChapter_lt?: Maybe<Int>;
  currentChapter_lte?: Maybe<Int>;
  currentChapter_gt?: Maybe<Int>;
  currentChapter_gte?: Maybe<Int>;
  AND?: Maybe<UserTutorialWhereInput[] | UserTutorialWhereInput>;
  OR?: Maybe<UserTutorialWhereInput[] | UserTutorialWhereInput>;
  NOT?: Maybe<UserTutorialWhereInput[] | UserTutorialWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  githubHandle?: Maybe<String>;
  githubHandle_not?: Maybe<String>;
  githubHandle_in?: Maybe<String[] | String>;
  githubHandle_not_in?: Maybe<String[] | String>;
  githubHandle_lt?: Maybe<String>;
  githubHandle_lte?: Maybe<String>;
  githubHandle_gt?: Maybe<String>;
  githubHandle_gte?: Maybe<String>;
  githubHandle_contains?: Maybe<String>;
  githubHandle_not_contains?: Maybe<String>;
  githubHandle_starts_with?: Maybe<String>;
  githubHandle_not_starts_with?: Maybe<String>;
  githubHandle_ends_with?: Maybe<String>;
  githubHandle_not_ends_with?: Maybe<String>;
  githubUserId?: Maybe<String>;
  githubUserId_not?: Maybe<String>;
  githubUserId_in?: Maybe<String[] | String>;
  githubUserId_not_in?: Maybe<String[] | String>;
  githubUserId_lt?: Maybe<String>;
  githubUserId_lte?: Maybe<String>;
  githubUserId_gt?: Maybe<String>;
  githubUserId_gte?: Maybe<String>;
  githubUserId_contains?: Maybe<String>;
  githubUserId_not_contains?: Maybe<String>;
  githubUserId_starts_with?: Maybe<String>;
  githubUserId_not_starts_with?: Maybe<String>;
  githubUserId_ends_with?: Maybe<String>;
  githubUserId_not_ends_with?: Maybe<String>;
  avatarUrl?: Maybe<String>;
  avatarUrl_not?: Maybe<String>;
  avatarUrl_in?: Maybe<String[] | String>;
  avatarUrl_not_in?: Maybe<String[] | String>;
  avatarUrl_lt?: Maybe<String>;
  avatarUrl_lte?: Maybe<String>;
  avatarUrl_gt?: Maybe<String>;
  avatarUrl_gte?: Maybe<String>;
  avatarUrl_contains?: Maybe<String>;
  avatarUrl_not_contains?: Maybe<String>;
  avatarUrl_starts_with?: Maybe<String>;
  avatarUrl_not_starts_with?: Maybe<String>;
  avatarUrl_ends_with?: Maybe<String>;
  avatarUrl_not_ends_with?: Maybe<String>;
  bio?: Maybe<String>;
  bio_not?: Maybe<String>;
  bio_in?: Maybe<String[] | String>;
  bio_not_in?: Maybe<String[] | String>;
  bio_lt?: Maybe<String>;
  bio_lte?: Maybe<String>;
  bio_gt?: Maybe<String>;
  bio_gte?: Maybe<String>;
  bio_contains?: Maybe<String>;
  bio_not_contains?: Maybe<String>;
  bio_starts_with?: Maybe<String>;
  bio_not_starts_with?: Maybe<String>;
  bio_ends_with?: Maybe<String>;
  bio_not_ends_with?: Maybe<String>;
  contributor?: Maybe<Boolean>;
  contributor_not?: Maybe<Boolean>;
  expertise?: Maybe<String>;
  expertise_not?: Maybe<String>;
  expertise_in?: Maybe<String[] | String>;
  expertise_not_in?: Maybe<String[] | String>;
  expertise_lt?: Maybe<String>;
  expertise_lte?: Maybe<String>;
  expertise_gt?: Maybe<String>;
  expertise_gte?: Maybe<String>;
  expertise_contains?: Maybe<String>;
  expertise_not_contains?: Maybe<String>;
  expertise_starts_with?: Maybe<String>;
  expertise_not_starts_with?: Maybe<String>;
  expertise_ends_with?: Maybe<String>;
  expertise_not_ends_with?: Maybe<String>;
  userTutorials_every?: Maybe<UserTutorialWhereInput>;
  userTutorials_some?: Maybe<UserTutorialWhereInput>;
  userTutorials_none?: Maybe<UserTutorialWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TutorialWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  gatsbyID?: Maybe<String>;
  gatsbyID_not?: Maybe<String>;
  gatsbyID_in?: Maybe<String[] | String>;
  gatsbyID_not_in?: Maybe<String[] | String>;
  gatsbyID_lt?: Maybe<String>;
  gatsbyID_lte?: Maybe<String>;
  gatsbyID_gt?: Maybe<String>;
  gatsbyID_gte?: Maybe<String>;
  gatsbyID_contains?: Maybe<String>;
  gatsbyID_not_contains?: Maybe<String>;
  gatsbyID_starts_with?: Maybe<String>;
  gatsbyID_not_starts_with?: Maybe<String>;
  gatsbyID_ends_with?: Maybe<String>;
  gatsbyID_not_ends_with?: Maybe<String>;
  numberofChapters?: Maybe<Int>;
  numberofChapters_not?: Maybe<Int>;
  numberofChapters_in?: Maybe<Int[] | Int>;
  numberofChapters_not_in?: Maybe<Int[] | Int>;
  numberofChapters_lt?: Maybe<Int>;
  numberofChapters_lte?: Maybe<Int>;
  numberofChapters_gt?: Maybe<Int>;
  numberofChapters_gte?: Maybe<Int>;
  numberofStudents?: Maybe<Int>;
  numberofStudents_not?: Maybe<Int>;
  numberofStudents_in?: Maybe<Int[] | Int>;
  numberofStudents_not_in?: Maybe<Int[] | Int>;
  numberofStudents_lt?: Maybe<Int>;
  numberofStudents_lte?: Maybe<Int>;
  numberofStudents_gt?: Maybe<Int>;
  numberofStudents_gte?: Maybe<Int>;
  upvotes?: Maybe<Int>;
  upvotes_not?: Maybe<Int>;
  upvotes_in?: Maybe<Int[] | Int>;
  upvotes_not_in?: Maybe<Int[] | Int>;
  upvotes_lt?: Maybe<Int>;
  upvotes_lte?: Maybe<Int>;
  upvotes_gt?: Maybe<Int>;
  upvotes_gte?: Maybe<Int>;
  userTutorials_every?: Maybe<UserTutorialWhereInput>;
  userTutorials_some?: Maybe<UserTutorialWhereInput>;
  userTutorials_none?: Maybe<UserTutorialWhereInput>;
  AND?: Maybe<TutorialWhereInput[] | TutorialWhereInput>;
  OR?: Maybe<TutorialWhereInput[] | TutorialWhereInput>;
  NOT?: Maybe<TutorialWhereInput[] | TutorialWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  githubHandle?: Maybe<String>;
  githubUserId?: Maybe<String>;
  expertise?: Maybe<String>;
}>;

export type UserTutorialWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TutorialCreateInput {
  name: String;
  gatsbyID: String;
  numberofChapters: Int;
  numberofStudents?: Maybe<Int>;
  upvotes?: Maybe<Int>;
  userTutorials?: Maybe<UserTutorialCreateManyWithoutTutorialInput>;
}

export interface UserTutorialCreateManyWithoutTutorialInput {
  create?: Maybe<
    | UserTutorialCreateWithoutTutorialInput[]
    | UserTutorialCreateWithoutTutorialInput
  >;
  connect?: Maybe<
    UserTutorialWhereUniqueInput[] | UserTutorialWhereUniqueInput
  >;
}

export interface UserTutorialCreateWithoutTutorialInput {
  user?: Maybe<UserCreateOneWithoutUserTutorialsInput>;
  upvoted?: Maybe<Boolean>;
  saved?: Maybe<Boolean>;
  currentChapter?: Maybe<Int>;
}

export interface UserCreateOneWithoutUserTutorialsInput {
  create?: Maybe<UserCreateWithoutUserTutorialsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutUserTutorialsInput {
  name: String;
  email?: Maybe<String>;
  githubHandle: String;
  githubUserId: String;
  avatarUrl?: Maybe<String>;
  bio?: Maybe<String>;
  contributor?: Maybe<Boolean>;
  expertise?: Maybe<String>;
}

export interface TutorialUpdateInput {
  name?: Maybe<String>;
  gatsbyID?: Maybe<String>;
  numberofChapters?: Maybe<Int>;
  numberofStudents?: Maybe<Int>;
  upvotes?: Maybe<Int>;
  userTutorials?: Maybe<UserTutorialUpdateManyWithoutTutorialInput>;
}

export interface UserTutorialUpdateManyWithoutTutorialInput {
  create?: Maybe<
    | UserTutorialCreateWithoutTutorialInput[]
    | UserTutorialCreateWithoutTutorialInput
  >;
  delete?: Maybe<UserTutorialWhereUniqueInput[] | UserTutorialWhereUniqueInput>;
  connect?: Maybe<
    UserTutorialWhereUniqueInput[] | UserTutorialWhereUniqueInput
  >;
  set?: Maybe<UserTutorialWhereUniqueInput[] | UserTutorialWhereUniqueInput>;
  disconnect?: Maybe<
    UserTutorialWhereUniqueInput[] | UserTutorialWhereUniqueInput
  >;
  update?: Maybe<
    | UserTutorialUpdateWithWhereUniqueWithoutTutorialInput[]
    | UserTutorialUpdateWithWhereUniqueWithoutTutorialInput
  >;
  upsert?: Maybe<
    | UserTutorialUpsertWithWhereUniqueWithoutTutorialInput[]
    | UserTutorialUpsertWithWhereUniqueWithoutTutorialInput
  >;
  deleteMany?: Maybe<
    UserTutorialScalarWhereInput[] | UserTutorialScalarWhereInput
  >;
  updateMany?: Maybe<
    | UserTutorialUpdateManyWithWhereNestedInput[]
    | UserTutorialUpdateManyWithWhereNestedInput
  >;
}

export interface UserTutorialUpdateWithWhereUniqueWithoutTutorialInput {
  where: UserTutorialWhereUniqueInput;
  data: UserTutorialUpdateWithoutTutorialDataInput;
}

export interface UserTutorialUpdateWithoutTutorialDataInput {
  user?: Maybe<UserUpdateOneWithoutUserTutorialsInput>;
  upvoted?: Maybe<Boolean>;
  saved?: Maybe<Boolean>;
  currentChapter?: Maybe<Int>;
}

export interface UserUpdateOneWithoutUserTutorialsInput {
  create?: Maybe<UserCreateWithoutUserTutorialsInput>;
  update?: Maybe<UserUpdateWithoutUserTutorialsDataInput>;
  upsert?: Maybe<UserUpsertWithoutUserTutorialsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutUserTutorialsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  githubHandle?: Maybe<String>;
  githubUserId?: Maybe<String>;
  avatarUrl?: Maybe<String>;
  bio?: Maybe<String>;
  contributor?: Maybe<Boolean>;
  expertise?: Maybe<String>;
}

export interface UserUpsertWithoutUserTutorialsInput {
  update: UserUpdateWithoutUserTutorialsDataInput;
  create: UserCreateWithoutUserTutorialsInput;
}

export interface UserTutorialUpsertWithWhereUniqueWithoutTutorialInput {
  where: UserTutorialWhereUniqueInput;
  update: UserTutorialUpdateWithoutTutorialDataInput;
  create: UserTutorialCreateWithoutTutorialInput;
}

export interface UserTutorialScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  upvoted?: Maybe<Boolean>;
  upvoted_not?: Maybe<Boolean>;
  saved?: Maybe<Boolean>;
  saved_not?: Maybe<Boolean>;
  currentChapter?: Maybe<Int>;
  currentChapter_not?: Maybe<Int>;
  currentChapter_in?: Maybe<Int[] | Int>;
  currentChapter_not_in?: Maybe<Int[] | Int>;
  currentChapter_lt?: Maybe<Int>;
  currentChapter_lte?: Maybe<Int>;
  currentChapter_gt?: Maybe<Int>;
  currentChapter_gte?: Maybe<Int>;
  AND?: Maybe<UserTutorialScalarWhereInput[] | UserTutorialScalarWhereInput>;
  OR?: Maybe<UserTutorialScalarWhereInput[] | UserTutorialScalarWhereInput>;
  NOT?: Maybe<UserTutorialScalarWhereInput[] | UserTutorialScalarWhereInput>;
}

export interface UserTutorialUpdateManyWithWhereNestedInput {
  where: UserTutorialScalarWhereInput;
  data: UserTutorialUpdateManyDataInput;
}

export interface UserTutorialUpdateManyDataInput {
  upvoted?: Maybe<Boolean>;
  saved?: Maybe<Boolean>;
  currentChapter?: Maybe<Int>;
}

export interface TutorialUpdateManyMutationInput {
  name?: Maybe<String>;
  gatsbyID?: Maybe<String>;
  numberofChapters?: Maybe<Int>;
  numberofStudents?: Maybe<Int>;
  upvotes?: Maybe<Int>;
}

export interface UserCreateInput {
  name: String;
  email?: Maybe<String>;
  githubHandle: String;
  githubUserId: String;
  avatarUrl?: Maybe<String>;
  bio?: Maybe<String>;
  contributor?: Maybe<Boolean>;
  expertise?: Maybe<String>;
  userTutorials?: Maybe<UserTutorialCreateManyWithoutUserInput>;
}

export interface UserTutorialCreateManyWithoutUserInput {
  create?: Maybe<
    UserTutorialCreateWithoutUserInput[] | UserTutorialCreateWithoutUserInput
  >;
  connect?: Maybe<
    UserTutorialWhereUniqueInput[] | UserTutorialWhereUniqueInput
  >;
}

export interface UserTutorialCreateWithoutUserInput {
  tutorial?: Maybe<TutorialCreateOneWithoutUserTutorialsInput>;
  upvoted?: Maybe<Boolean>;
  saved?: Maybe<Boolean>;
  currentChapter?: Maybe<Int>;
}

export interface TutorialCreateOneWithoutUserTutorialsInput {
  create?: Maybe<TutorialCreateWithoutUserTutorialsInput>;
  connect?: Maybe<TutorialWhereUniqueInput>;
}

export interface TutorialCreateWithoutUserTutorialsInput {
  name: String;
  gatsbyID: String;
  numberofChapters: Int;
  numberofStudents?: Maybe<Int>;
  upvotes?: Maybe<Int>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  githubHandle?: Maybe<String>;
  githubUserId?: Maybe<String>;
  avatarUrl?: Maybe<String>;
  bio?: Maybe<String>;
  contributor?: Maybe<Boolean>;
  expertise?: Maybe<String>;
  userTutorials?: Maybe<UserTutorialUpdateManyWithoutUserInput>;
}

export interface UserTutorialUpdateManyWithoutUserInput {
  create?: Maybe<
    UserTutorialCreateWithoutUserInput[] | UserTutorialCreateWithoutUserInput
  >;
  delete?: Maybe<UserTutorialWhereUniqueInput[] | UserTutorialWhereUniqueInput>;
  connect?: Maybe<
    UserTutorialWhereUniqueInput[] | UserTutorialWhereUniqueInput
  >;
  set?: Maybe<UserTutorialWhereUniqueInput[] | UserTutorialWhereUniqueInput>;
  disconnect?: Maybe<
    UserTutorialWhereUniqueInput[] | UserTutorialWhereUniqueInput
  >;
  update?: Maybe<
    | UserTutorialUpdateWithWhereUniqueWithoutUserInput[]
    | UserTutorialUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | UserTutorialUpsertWithWhereUniqueWithoutUserInput[]
    | UserTutorialUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    UserTutorialScalarWhereInput[] | UserTutorialScalarWhereInput
  >;
  updateMany?: Maybe<
    | UserTutorialUpdateManyWithWhereNestedInput[]
    | UserTutorialUpdateManyWithWhereNestedInput
  >;
}

export interface UserTutorialUpdateWithWhereUniqueWithoutUserInput {
  where: UserTutorialWhereUniqueInput;
  data: UserTutorialUpdateWithoutUserDataInput;
}

export interface UserTutorialUpdateWithoutUserDataInput {
  tutorial?: Maybe<TutorialUpdateOneWithoutUserTutorialsInput>;
  upvoted?: Maybe<Boolean>;
  saved?: Maybe<Boolean>;
  currentChapter?: Maybe<Int>;
}

export interface TutorialUpdateOneWithoutUserTutorialsInput {
  create?: Maybe<TutorialCreateWithoutUserTutorialsInput>;
  update?: Maybe<TutorialUpdateWithoutUserTutorialsDataInput>;
  upsert?: Maybe<TutorialUpsertWithoutUserTutorialsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TutorialWhereUniqueInput>;
}

export interface TutorialUpdateWithoutUserTutorialsDataInput {
  name?: Maybe<String>;
  gatsbyID?: Maybe<String>;
  numberofChapters?: Maybe<Int>;
  numberofStudents?: Maybe<Int>;
  upvotes?: Maybe<Int>;
}

export interface TutorialUpsertWithoutUserTutorialsInput {
  update: TutorialUpdateWithoutUserTutorialsDataInput;
  create: TutorialCreateWithoutUserTutorialsInput;
}

export interface UserTutorialUpsertWithWhereUniqueWithoutUserInput {
  where: UserTutorialWhereUniqueInput;
  update: UserTutorialUpdateWithoutUserDataInput;
  create: UserTutorialCreateWithoutUserInput;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  githubHandle?: Maybe<String>;
  githubUserId?: Maybe<String>;
  avatarUrl?: Maybe<String>;
  bio?: Maybe<String>;
  contributor?: Maybe<Boolean>;
  expertise?: Maybe<String>;
}

export interface UserTutorialCreateInput {
  user?: Maybe<UserCreateOneWithoutUserTutorialsInput>;
  tutorial?: Maybe<TutorialCreateOneWithoutUserTutorialsInput>;
  upvoted?: Maybe<Boolean>;
  saved?: Maybe<Boolean>;
  currentChapter?: Maybe<Int>;
}

export interface UserTutorialUpdateInput {
  user?: Maybe<UserUpdateOneWithoutUserTutorialsInput>;
  tutorial?: Maybe<TutorialUpdateOneWithoutUserTutorialsInput>;
  upvoted?: Maybe<Boolean>;
  saved?: Maybe<Boolean>;
  currentChapter?: Maybe<Int>;
}

export interface UserTutorialUpdateManyMutationInput {
  upvoted?: Maybe<Boolean>;
  saved?: Maybe<Boolean>;
  currentChapter?: Maybe<Int>;
}

export interface TutorialSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TutorialWhereInput>;
  AND?: Maybe<
    TutorialSubscriptionWhereInput[] | TutorialSubscriptionWhereInput
  >;
  OR?: Maybe<TutorialSubscriptionWhereInput[] | TutorialSubscriptionWhereInput>;
  NOT?: Maybe<
    TutorialSubscriptionWhereInput[] | TutorialSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserTutorialSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserTutorialWhereInput>;
  AND?: Maybe<
    UserTutorialSubscriptionWhereInput[] | UserTutorialSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserTutorialSubscriptionWhereInput[] | UserTutorialSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserTutorialSubscriptionWhereInput[] | UserTutorialSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Tutorial {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  gatsbyID: String;
  numberofChapters: Int;
  numberofStudents: Int;
  upvotes: Int;
}

export interface TutorialPromise extends Promise<Tutorial>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  gatsbyID: () => Promise<String>;
  numberofChapters: () => Promise<Int>;
  numberofStudents: () => Promise<Int>;
  upvotes: () => Promise<Int>;
  userTutorials: <T = FragmentableArray<UserTutorial>>(args?: {
    where?: UserTutorialWhereInput;
    orderBy?: UserTutorialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TutorialSubscription
  extends Promise<AsyncIterator<Tutorial>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  gatsbyID: () => Promise<AsyncIterator<String>>;
  numberofChapters: () => Promise<AsyncIterator<Int>>;
  numberofStudents: () => Promise<AsyncIterator<Int>>;
  upvotes: () => Promise<AsyncIterator<Int>>;
  userTutorials: <T = Promise<AsyncIterator<UserTutorialSubscription>>>(args?: {
    where?: UserTutorialWhereInput;
    orderBy?: UserTutorialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TutorialNullablePromise
  extends Promise<Tutorial | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  gatsbyID: () => Promise<String>;
  numberofChapters: () => Promise<Int>;
  numberofStudents: () => Promise<Int>;
  upvotes: () => Promise<Int>;
  userTutorials: <T = FragmentableArray<UserTutorial>>(args?: {
    where?: UserTutorialWhereInput;
    orderBy?: UserTutorialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserTutorial {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  upvoted?: Boolean;
  saved?: Boolean;
  currentChapter?: Int;
}

export interface UserTutorialPromise
  extends Promise<UserTutorial>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  tutorial: <T = TutorialPromise>() => T;
  upvoted: () => Promise<Boolean>;
  saved: () => Promise<Boolean>;
  currentChapter: () => Promise<Int>;
}

export interface UserTutorialSubscription
  extends Promise<AsyncIterator<UserTutorial>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  tutorial: <T = TutorialSubscription>() => T;
  upvoted: () => Promise<AsyncIterator<Boolean>>;
  saved: () => Promise<AsyncIterator<Boolean>>;
  currentChapter: () => Promise<AsyncIterator<Int>>;
}

export interface UserTutorialNullablePromise
  extends Promise<UserTutorial | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  tutorial: <T = TutorialPromise>() => T;
  upvoted: () => Promise<Boolean>;
  saved: () => Promise<Boolean>;
  currentChapter: () => Promise<Int>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email?: String;
  githubHandle: String;
  githubUserId: String;
  avatarUrl?: String;
  bio?: String;
  contributor?: Boolean;
  expertise?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  githubHandle: () => Promise<String>;
  githubUserId: () => Promise<String>;
  avatarUrl: () => Promise<String>;
  bio: () => Promise<String>;
  contributor: () => Promise<Boolean>;
  expertise: () => Promise<String>;
  userTutorials: <T = FragmentableArray<UserTutorial>>(args?: {
    where?: UserTutorialWhereInput;
    orderBy?: UserTutorialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  githubHandle: () => Promise<AsyncIterator<String>>;
  githubUserId: () => Promise<AsyncIterator<String>>;
  avatarUrl: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  contributor: () => Promise<AsyncIterator<Boolean>>;
  expertise: () => Promise<AsyncIterator<String>>;
  userTutorials: <T = Promise<AsyncIterator<UserTutorialSubscription>>>(args?: {
    where?: UserTutorialWhereInput;
    orderBy?: UserTutorialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  githubHandle: () => Promise<String>;
  githubUserId: () => Promise<String>;
  avatarUrl: () => Promise<String>;
  bio: () => Promise<String>;
  contributor: () => Promise<Boolean>;
  expertise: () => Promise<String>;
  userTutorials: <T = FragmentableArray<UserTutorial>>(args?: {
    where?: UserTutorialWhereInput;
    orderBy?: UserTutorialOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TutorialConnection {
  pageInfo: PageInfo;
  edges: TutorialEdge[];
}

export interface TutorialConnectionPromise
  extends Promise<TutorialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TutorialEdge>>() => T;
  aggregate: <T = AggregateTutorialPromise>() => T;
}

export interface TutorialConnectionSubscription
  extends Promise<AsyncIterator<TutorialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TutorialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTutorialSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface TutorialEdge {
  node: Tutorial;
  cursor: String;
}

export interface TutorialEdgePromise
  extends Promise<TutorialEdge>,
    Fragmentable {
  node: <T = TutorialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TutorialEdgeSubscription
  extends Promise<AsyncIterator<TutorialEdge>>,
    Fragmentable {
  node: <T = TutorialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTutorial {
  count: Int;
}

export interface AggregateTutorialPromise
  extends Promise<AggregateTutorial>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTutorialSubscription
  extends Promise<AsyncIterator<AggregateTutorial>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserTutorialConnection {
  pageInfo: PageInfo;
  edges: UserTutorialEdge[];
}

export interface UserTutorialConnectionPromise
  extends Promise<UserTutorialConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserTutorialEdge>>() => T;
  aggregate: <T = AggregateUserTutorialPromise>() => T;
}

export interface UserTutorialConnectionSubscription
  extends Promise<AsyncIterator<UserTutorialConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserTutorialEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserTutorialSubscription>() => T;
}

export interface UserTutorialEdge {
  node: UserTutorial;
  cursor: String;
}

export interface UserTutorialEdgePromise
  extends Promise<UserTutorialEdge>,
    Fragmentable {
  node: <T = UserTutorialPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserTutorialEdgeSubscription
  extends Promise<AsyncIterator<UserTutorialEdge>>,
    Fragmentable {
  node: <T = UserTutorialSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserTutorial {
  count: Int;
}

export interface AggregateUserTutorialPromise
  extends Promise<AggregateUserTutorial>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserTutorialSubscription
  extends Promise<AsyncIterator<AggregateUserTutorial>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TutorialSubscriptionPayload {
  mutation: MutationType;
  node: Tutorial;
  updatedFields: String[];
  previousValues: TutorialPreviousValues;
}

export interface TutorialSubscriptionPayloadPromise
  extends Promise<TutorialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TutorialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TutorialPreviousValuesPromise>() => T;
}

export interface TutorialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TutorialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TutorialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TutorialPreviousValuesSubscription>() => T;
}

export interface TutorialPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  gatsbyID: String;
  numberofChapters: Int;
  numberofStudents: Int;
  upvotes: Int;
}

export interface TutorialPreviousValuesPromise
  extends Promise<TutorialPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  gatsbyID: () => Promise<String>;
  numberofChapters: () => Promise<Int>;
  numberofStudents: () => Promise<Int>;
  upvotes: () => Promise<Int>;
}

export interface TutorialPreviousValuesSubscription
  extends Promise<AsyncIterator<TutorialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  gatsbyID: () => Promise<AsyncIterator<String>>;
  numberofChapters: () => Promise<AsyncIterator<Int>>;
  numberofStudents: () => Promise<AsyncIterator<Int>>;
  upvotes: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email?: String;
  githubHandle: String;
  githubUserId: String;
  avatarUrl?: String;
  bio?: String;
  contributor?: Boolean;
  expertise?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  githubHandle: () => Promise<String>;
  githubUserId: () => Promise<String>;
  avatarUrl: () => Promise<String>;
  bio: () => Promise<String>;
  contributor: () => Promise<Boolean>;
  expertise: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  githubHandle: () => Promise<AsyncIterator<String>>;
  githubUserId: () => Promise<AsyncIterator<String>>;
  avatarUrl: () => Promise<AsyncIterator<String>>;
  bio: () => Promise<AsyncIterator<String>>;
  contributor: () => Promise<AsyncIterator<Boolean>>;
  expertise: () => Promise<AsyncIterator<String>>;
}

export interface UserTutorialSubscriptionPayload {
  mutation: MutationType;
  node: UserTutorial;
  updatedFields: String[];
  previousValues: UserTutorialPreviousValues;
}

export interface UserTutorialSubscriptionPayloadPromise
  extends Promise<UserTutorialSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserTutorialPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserTutorialPreviousValuesPromise>() => T;
}

export interface UserTutorialSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserTutorialSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserTutorialSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserTutorialPreviousValuesSubscription>() => T;
}

export interface UserTutorialPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  upvoted?: Boolean;
  saved?: Boolean;
  currentChapter?: Int;
}

export interface UserTutorialPreviousValuesPromise
  extends Promise<UserTutorialPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  upvoted: () => Promise<Boolean>;
  saved: () => Promise<Boolean>;
  currentChapter: () => Promise<Int>;
}

export interface UserTutorialPreviousValuesSubscription
  extends Promise<AsyncIterator<UserTutorialPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  upvoted: () => Promise<AsyncIterator<Boolean>>;
  saved: () => Promise<AsyncIterator<Boolean>>;
  currentChapter: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserTutorial",
    embedded: false
  },
  {
    name: "Tutorial",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://howtographql-prod_howtographql-internal.prisma.sh/howtographql/dev`
});
export const prisma = new Prisma();
